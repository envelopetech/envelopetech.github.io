{"version":3,"sources":["../node_modules/@material-ui/core/esm/CardActions/CardActions.js","../node_modules/@material-ui/core/esm/CardHeader/CardHeader.js","views/account/AccountView/ProfileDetails.js","views/account/AccountView/GeneralSettings.js","views/account/AccountView/index.js"],"names":["CardActions","React","props","ref","_props$disableSpacing","disableSpacing","classes","className","other","_objectWithoutProperties","_extends","clsx","root","spacing","withStyles","display","alignItems","padding","marginLeft","name","CardHeader","action","avatar","_props$component","component","Component","_props$disableTypogra","disableTypography","subheaderProp","subheader","subheaderTypographyProps","titleProp","title","titleTypographyProps","type","Typography","variant","color","content","flex","marginRight","alignSelf","marginTop","useStyles","makeStyles","theme","height","width","ProfileDetails","rest","user","useDispatch","useSnackbar","enqueueSnackbar","Fragment","Card","CardContent","Box","flexDirection","textAlign","gutterBottom","Avatar","src","Button","fullWidth","GeneralSettings","enableReinitialize","initialValues","email","company","designation","submit","validationSchema","Yup","shape","max","required","onSubmit","values","a","resetForm","setErrors","setStatus","setSubmitting","success","err","console","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Divider","Grid","container","item","md","xs","TextField","Boolean","helperText","label","onBlur","onChange","value","mt","FormHelperText","p","justifyContent","disabled","backgroundColor","palette","background","dark","minHeight","banner","paper","paddingBottom","paddingTop","borderBottom","divider","bannerChip","methodIcon","cardContainer","cardContent","currentMethodIcon","maxHeight","General","Container","maxWidth","lg","xl"],"mappings":"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","file":"static/js/15.85abfcc9.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = /*#__PURE__*/React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 16\n  },\n\n  /* Styles applied to the avatar element. */\n  avatar: {\n    flex: '0 0 auto',\n    marginRight: 16\n  },\n\n  /* Styles applied to the action element. */\n  action: {\n    flex: '0 0 auto',\n    alignSelf: 'flex-start',\n    marginTop: -8,\n    marginRight: -8\n  },\n\n  /* Styles applied to the content wrapper element. */\n  content: {\n    flex: '1 1 auto'\n  },\n\n  /* Styles applied to the title Typography element. */\n  title: {},\n\n  /* Styles applied to the subheader Typography element. */\n  subheader: {}\n};\nvar CardHeader = /*#__PURE__*/React.forwardRef(function CardHeader(props, ref) {\n  var action = props.action,\n      avatar = props.avatar,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      subheaderProp = props.subheader,\n      subheaderTypographyProps = props.subheaderTypographyProps,\n      titleProp = props.title,\n      titleTypographyProps = props.titleTypographyProps,\n      other = _objectWithoutProperties(props, [\"action\", \"avatar\", \"classes\", \"className\", \"component\", \"disableTypography\", \"subheader\", \"subheaderTypographyProps\", \"title\", \"titleTypographyProps\"]);\n\n  var title = titleProp;\n\n  if (title != null && title.type !== Typography && !disableTypography) {\n    title = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'h5',\n      className: classes.title,\n      component: \"span\",\n      display: \"block\"\n    }, titleTypographyProps), title);\n  }\n\n  var subheader = subheaderProp;\n\n  if (subheader != null && subheader.type !== Typography && !disableTypography) {\n    subheader = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: avatar ? 'body2' : 'body1',\n      className: classes.subheader,\n      color: \"textSecondary\",\n      component: \"span\",\n      display: \"block\"\n    }, subheaderTypographyProps), subheader);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), avatar && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.avatar\n  }, avatar), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content\n  }, title, subheader), action && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardHeader.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display in the card header.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The Avatar for the Card Header.\n   */\n  avatar: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  subheader: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps: PropTypes.object,\n\n  /**\n   * The content of the Card Title.\n   */\n  title: PropTypes.node,\n\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardHeader'\n})(CardHeader);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    Typography,\r\n    makeStyles\r\n} from '@material-ui/core';\r\n\r\nimport { useDispatch } from 'src/store';\r\n\r\nimport { useSnackbar } from 'notistack';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {},\r\n    name: {\r\n        marginTop: theme.spacing(1)\r\n    },\r\n    avatar: {\r\n        height: 100,\r\n        width: 100\r\n    }\r\n}));\r\n\r\nconst ProfileDetails = ({ className, user, ...rest }) => {\r\n    const dispatch = useDispatch();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n\r\n    \r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <React.Fragment>\r\n            <Card\r\n                className={clsx(classes.root, className)}\r\n                {...rest}\r\n            >\r\n                <CardContent>\r\n                    <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        flexDirection=\"column\"\r\n                        textAlign=\"center\"\r\n                    >\r\n                        <Typography\r\n                            className={classes.name}\r\n                            color=\"textPrimary\"\r\n                            gutterBottom\r\n                            variant=\"h5\"\r\n                        >\r\n                            Profile Photo\r\n                        </Typography>\r\n                        <Avatar\r\n                            className={classes.avatar}\r\n                            src=\"https://cdn.filestackcontent.com/vwmRBk3vQSyvoNULyKfa\"\r\n                        />\r\n                    </Box>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        fullWidth\r\n                        variant=\"text\"\r\n                    >\r\n                        Edit picture\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n};\r\n\r\nProfileDetails.propTypes = {\r\n    className: PropTypes.string,\r\n    user: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ProfileDetails;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { useSnackbar } from 'notistack';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Divider,\r\n    FormHelperText,\r\n    Grid,\r\n    Switch,\r\n    TextField,\r\n    Typography,\r\n    makeStyles\r\n} from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {}\r\n}));\r\n\r\nconst GeneralSettings = ({ className, user, ...rest }) => {\r\n    const classes = useStyles();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    \r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{\r\n                name: 'Nisarg',\r\n                email: 'mnisarg@gmail.com',\r\n                company: 'Xporium',\r\n                designation: 'Founder',\r\n                submit: null\r\n            }}\r\n            validationSchema={Yup.object().shape({\r\n                designation: Yup.string().max(255),\r\n                company: Yup.string().max(255),\r\n                name: Yup.string().max(255).required('Name is required'),\r\n                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n            })}\r\n            onSubmit={async (values, {\r\n                resetForm,\r\n                setErrors,\r\n                setStatus,\r\n                setSubmitting\r\n            }) => {\r\n                try {\r\n\r\n                    \r\n                    resetForm();\r\n                    setStatus({ success: true });\r\n                    setSubmitting(false);\r\n                    enqueueSnackbar('Profile updated', {\r\n                        variant: 'success'\r\n                    });\r\n                } catch (err) {\r\n                    console.error(err);\r\n                    setStatus({ success: false });\r\n                    setErrors({ submit: err.message });\r\n                    setSubmitting(false);\r\n                }\r\n            }}\r\n        >\r\n            {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                isSubmitting,\r\n                touched,\r\n                values\r\n            }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Card\r\n                            className={clsx(classes.root, className)}\r\n                            {...rest}\r\n                        >\r\n                            <CardHeader title=\"Profile\" />\r\n                            <Divider />\r\n                            <CardContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={4}\r\n                                >\r\n                                    <Grid\r\n                                        item\r\n                                        md={6}\r\n                                        xs={12}\r\n                                    >\r\n                                        <TextField\r\n                                            error={Boolean(touched.name && errors.name)}\r\n                                            fullWidth\r\n                                            helperText={touched.name && errors.name}\r\n                                            label=\"Name\"\r\n                                            name=\"name\"\r\n                                            onBlur={handleBlur}\r\n                                            onChange={handleChange}\r\n                                            value={values.name}\r\n                                            variant=\"outlined\"\r\n                                            required\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid\r\n                                        item\r\n                                        md={6}\r\n                                        xs={12}\r\n                                    >\r\n                                        <TextField\r\n                                            error={Boolean(touched.email && errors.email)}\r\n                                            fullWidth\r\n                                            label=\"Email Address\"\r\n                                            name=\"email\"\r\n                                            onBlur={handleBlur}\r\n                                            onChange={handleChange}\r\n                                            required\r\n                                            type=\"email\"\r\n                                            value={values.email}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid\r\n                                        item\r\n                                        md={6}\r\n                                        xs={12}\r\n                                    >\r\n                                        <TextField\r\n                                            error={Boolean(touched.company && errors.company)}\r\n                                            fullWidth\r\n                                            helperText={touched.company && errors.company}\r\n                                            label=\"Company\"\r\n                                            name=\"company\"\r\n                                            onBlur={handleBlur}\r\n                                            onChange={handleChange}\r\n                                            value={values.company}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                    <Grid\r\n                                        item\r\n                                        md={6}\r\n                                        xs={12}\r\n                                    >\r\n                                       <TextField\r\n                                            error={Boolean(touched.designation && errors.designation)}\r\n                                            fullWidth\r\n                                            helperText={touched.designation && errors.designation}\r\n                                            label=\"Designation\"\r\n                                            name=\"designation\"\r\n                                            onBlur={handleBlur}\r\n                                            onChange={handleChange}\r\n                                            value={values.designation}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                                {errors.submit && (\r\n                                    <Box mt={3}>\r\n                                        <FormHelperText error>\r\n                                            {errors.submit}\r\n                                        </FormHelperText>\r\n                                    </Box>\r\n                                )}\r\n                            </CardContent>\r\n                            <Divider />\r\n                            <Box\r\n                                p={2}\r\n                                display=\"flex\"\r\n                                justifyContent=\"flex-end\"\r\n                            >\r\n                                <Button\r\n                                    color=\"secondary\"\r\n                                    disabled={isSubmitting}\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                >\r\n                                    Save Changes\r\n              </Button>\r\n                            </Box>\r\n                        </Card>\r\n                    </form>\r\n                )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nGeneralSettings.propTypes = {\r\n    className: PropTypes.string,\r\n    user: PropTypes.object.isRequired\r\n};\r\n\r\nexport default GeneralSettings;\r\n","import React, {useEffect} from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, makeStyles, Container } from '@material-ui/core';\r\nimport ProfileDetails from './ProfileDetails';\r\nimport GeneralSettings from './GeneralSettings';\r\nimport { useDispatch } from 'src/store';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.dark,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minHeight: '100vh'\r\n      },\r\n      banner: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        paddingBottom: theme.spacing(2),\r\n        paddingTop: theme.spacing(2),\r\n        borderBottom: `1px solid ${theme.palette.divider}`\r\n      },\r\n      bannerChip: {\r\n        marginRight: theme.spacing(2)\r\n      },\r\n      methodIcon: {\r\n        height: 30,\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2)\r\n      },\r\n      cardContainer: {\r\n        paddingBottom: 80,\r\n        paddingTop: 80,\r\n      },\r\n      cardContent: {\r\n        padding: theme.spacing(4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minHeight: 400\r\n      },\r\n      currentMethodIcon: {\r\n        height: 40,\r\n        '& > img': {\r\n          width: 'auto',\r\n          maxHeight: '100%'\r\n        }\r\n      }\r\n}));\r\n\r\n\r\n\r\nconst General = () => {\r\n  const classes = useStyles();\r\n  \r\n\r\n  return (\r\n    <Container\r\n    className={classes.cardContainer}\r\n    maxWidth=\"md\"\r\n  >\r\n    <Grid      \r\n      container\r\n      spacing={3}     \r\n    >\r\n      <Grid\r\n        item\r\n        lg={4}\r\n        md={6}\r\n        xl={3}\r\n        xs={6}\r\n      >\r\n        <ProfileDetails />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        lg={8}\r\n        md={6}\r\n        xl={9}\r\n        xs={6}\r\n      >\r\n        <GeneralSettings />\r\n      </Grid>\r\n    </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nGeneral.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default General;\r\n"],"sourceRoot":""}